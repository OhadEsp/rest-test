{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["getKeys","data","Object","keys","Array","isArray","getHeader","undefined","map","key","index","toUpperCase","Rows","getRowsData","items","push","row","Table","header","rowsData","getData","url","a","fetch","response","json","App","useState","setUrl","setData","displayed","Box","display","alignItems","justifyContent","p","Typography","variant","TextField","id","onChange","e","target","value","fullWidth","Button","color","onClick","console","log","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAEMA,EAAU,SAACC,GAEb,OADaC,OAAOC,KAAKC,MAAMC,QAAQJ,GAAQA,EAAK,GAAKA,IAGvDK,EAAY,SAACL,GACf,YAAaM,IAATN,EAA2B,GAClBD,EAAQC,GACTO,KAAI,SAACC,EAAKC,GAClB,OAAO,wBAAID,IAAKA,GAAMA,EAAIE,mBAGlC,SAASC,EAAT,GAAwC,IAAxBX,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,KAAiB,+BACnC,OAAOA,EAAKK,KAAI,SAACC,EAAKC,GAClB,OAAO,wBAAID,IAAKR,EAAKQ,IAAOR,EAAKQ,OAGzC,IAAMI,EAAc,SAACZ,GACjB,QAAaM,IAATN,EAAoB,MAAO,GAC/B,IAAIa,EACAV,MAAMC,QAAQJ,GACda,EAAQb,GAERa,EAAQ,IACFC,KAAKd,GAEf,IAAME,EAAOH,EAAQC,GACrB,OAAOa,EAAMN,KAAI,SAACQ,EAAKN,GACnB,OAAO,wBAAID,IAAKC,GAAO,kBAACE,EAAD,CAAMH,IAAKC,EAAOT,KAAMe,EAAKb,KAAMA,SAIjD,SAASc,EAAT,GAAyB,IAARhB,EAAO,EAAPA,KACtBiB,EAASZ,EAAUL,GACnBkB,EAAWN,EAAYZ,GAC7B,OACE,+BACI,+BACI,4BAAKiB,IAET,+BACKC,I,SCFFC,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,sEACyBC,MAAMF,GAD/B,cACQG,EADR,yBAESA,EAASC,QAFlB,4C,sBAKeC,MArCf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNN,EADM,KACDO,EADC,OAEWD,qBAFX,mBAEN1B,EAFM,KAEA4B,EAFA,KAGTC,OAAqBvB,IAATN,EAAqB,kBAACgB,EAAD,CAAOhB,KAAMA,IAAW,8BAE7D,OACE,kBAAC8B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASC,EAAG,GACjE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,oCAKF,kBAACN,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASC,EAAG,GACjE,kBAACG,EAAA,EAAD,CAAWC,GAAG,eAAeF,QAAQ,SAASG,SAAU,SAAAC,GAAC,OAAIb,EAAOa,EAAEC,OAAOC,QAAQC,WAAS,KAGhG,kBAACb,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASC,EAAG,GACjE,kBAACU,EAAA,EAAD,CAAQR,QAAQ,YAAYS,MAAM,UAAUC,QAAO,sBAAE,4BAAAzB,EAAA,sEAChCF,EAAQC,GADwB,OAC7CpB,EAD6C,OAEnD4B,EAAQ5B,GACR+C,QAAQC,IAAIC,KAAKC,UAAUlD,IAHwB,4CAArD,aAOF,kBAAC8B,EAAA,EAAD,CAAKC,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAASC,EAAG,GAChEL,KCtBWsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8fd7ae74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst getKeys = (data) => {\r\n    const keys = Object.keys(Array.isArray(data) ? data[0] : data);\r\n    return keys;\r\n}\r\nconst getHeader = (data) => {\r\n    if (data === undefined) return [];\r\n    const keys = getKeys(data);\r\n    return keys.map((key, index) => {\r\n        return <th key={key}>{key.toUpperCase()}</th>\r\n    })\r\n};\r\nfunction Rows ({data, keys, ...props}) {\r\n    return keys.map((key, index) => {\r\n        return <td key={data[key]}>{data[key]}</td>\r\n    })\r\n};\r\nconst getRowsData = (data) => {\r\n    if (data === undefined) return [];\r\n    let items;\r\n    if (Array.isArray(data)) {\r\n        items = data;\r\n    } else {\r\n        items = [];\r\n        items.push(data);\r\n    }\r\n    const keys = getKeys(data);\r\n    return items.map((row, index) => {\r\n        return <tr key={index}><Rows key={index} data={row} keys={keys} /></tr>\r\n    })\r\n};\r\n\r\n  export default function Table ({data}) {\r\n      const header = getHeader(data);\r\n      const rowsData = getRowsData(data);\r\n      return (\r\n        <table>\r\n            <thead>\r\n                <tr>{header}</tr>\r\n            </thead>\r\n            <tbody>\r\n                {rowsData}\r\n            </tbody>\r\n        </table>\r\n      )\r\n  }","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport { Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from './Table.js';\r\n\r\nfunction App() {\r\n  const [url, setUrl] = useState('');\r\n  const [data, setData] = useState();\r\n  let displayed = data !== undefined ? <Table data={data} /> : <div></div>;\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" p={1}>\r\n        <Typography variant=\"h4\">\r\n          Welcome to my Rest-API-Test App\r\n        </Typography>\r\n      </Box>\r\n      \r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" p={1}>\r\n        <TextField id=\"filled-basic\" variant=\"filled\" onChange={e => setUrl(e.target.value)} fullWidth></TextField>\r\n      </Box>\r\n\r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" p={1}>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={async () => {\r\n          const data = await getData(url);\r\n          setData(data);\r\n          console.log(JSON.stringify(data));\r\n        }}>Get Data</Button>\r\n      </Box>\r\n      \r\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" p={1}>\r\n        {displayed}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nasync function getData(url) {\r\n  const response = await fetch(url);\r\n  return response.json();\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}